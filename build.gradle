plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.8.20'
    id 'nu.studer.jooq' version '8.1'
    id "org.flywaydb.flyway" version "9.16.3"
}

group = 'com.gildedrose'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

ext.junitVersion = '5.9.1'
ext.jacksonVersion = '2.14.1'
ext.jdbcUrl = providers.environmentVariable('JDBC_URL').orElse('jdbc:postgresql://localhost:5433/gilded-rose').get()
ext.databaseUsername = providers.environmentVariable('DB_USERNAME').orElse('gilded').get()
ext.databasePassword = providers.environmentVariable('DB_PASSWORD').orElse('rose').get()


dependencies {
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
    implementation "dev.forkhandles:result4k:2.3.0.0"
    implementation "org.slf4j:slf4j-jdk14:1.7.36"

    implementation platform("org.http4k:http4k-bom:4.35.3.0")
    implementation "org.http4k:http4k-core"
    implementation "org.http4k:http4k-server-undertow"
    implementation "org.http4k:http4k-cloudnative"
    implementation "org.http4k:http4k-client-apache"
    implementation "org.http4k:http4k-template-handlebars"
    implementation "org.http4k:http4k-client-apache"

    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    implementation "com.fasterxml.jackson.module:jackson-module-parameter-names:$jacksonVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"

    implementation "org.postgresql:postgresql:42.5.3"
    implementation "com.zaxxer:HikariCP:5.0.1"

    implementation "org.jooq:jooq:3.17.6"

    implementation "io.arrow-kt:arrow-core:1.2.0"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "io.strikt:strikt-core:0.34.1"

    testImplementation "org.http4k:http4k-testing-approval"
    testImplementation "org.http4k:http4k-testing-hamkrest"

    jooqGenerator 'org.postgresql:postgresql:42.5.3'
}

test {
    useJUnitPlatform()
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(19)
    }
}

compileKotlin {
    compilerOptions.freeCompilerArgs.add("-Xcontext-receivers")
}

compileTestKotlin {
    compilerOptions.freeCompilerArgs.add("-Xcontext-receivers")
}

flyway {
    url = "$jdbcUrl"
    user = "$databaseUsername"
    password = "$databasePassword"
}

jooq {
    version = '3.17.6'  // default (can be omitted)
    edition = nu.studer.gradle.jooq.JooqEdition.OSS  // default (can be omitted)

    configurations {
        main {  // name of the jOOQ configuration
            generateSchemaSourceOnCompilation = true  // default (can be omitted)

            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = "$jdbcUrl"
                    user = "$databaseUsername"
                    password = "$databasePassword"
                    properties {
                        property {
                            key = 'ssl'
                            value = 'false'
                        }
                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        forcedTypes {
                            forcedType {
                                name = 'instant'
                                includeExpression = '.*'
                                includeTypes = 'TIMESTAMPTZ'
                            }
                        }
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'com.gildedrose.db'
                        directory = 'build/generated-src/jooq/main'  // default (can be omitted)
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

tasks.named('generateJooq').configure { allInputsDeclared = true }
